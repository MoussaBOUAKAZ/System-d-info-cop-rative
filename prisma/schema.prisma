// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String?  @unique
  password String  
  role     Role     @default(USER)
  sessions Session[]
  accounts Account[]
  conversations ConversationParticipant[]
  messages      Message[]

  events    Event[]  @relation("EventParticipants")
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Conversations (DM or Group)
model Conversation {
  id          String                     @id @default(cuid())
  isGroup     Boolean                    @default(false)
  name        String?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String        @id @default(cuid())
  userId         String
  conversationId String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String        @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Contact {
  id         Int           @id @default(autoincrement())
  fullName   String
  email      String?
  phone      String?
  company    String?
  position   String?
  type       String?       // client, prospect, partenaire
  address    String?
  city       String?
  country    String?
  postalCode String?
  Statut     String?
  interactions Interaction[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  type        ProductType
  category    String
  price       Float
  status      ProductStatus @default(ACTIVE)
  stock       Int?
  description String
  clients     Int        // nombre de clients ayant acheté ce produit/service à suprimer

  // Relation : un produit peut être lié à plusieurs interactions (ex: ventes, support, etc.)
  interactions Interaction[] 

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProductType {
  PRODUCT
  SERVICE
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

// Exemple de relation : une Interaction peut être liée à un Product
model Interaction {
  id          Int       @id @default(autoincrement())
  type        String    // "email" | "call" | "meeting"
  subject     String
  content     String?
  date        DateTime
  duration    String?
  status      String?   // "completed" | "pending" | etc.
  contactId   Int
  contact     Contact   @relation(fields: [contactId], references: [id])

  // Nouvelle relation
  productId   String?   // facultatif si toutes les interactions ne concernent pas un produit
  product     Product?  @relation(fields: [productId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id           String   @id @default(uuid())
  title        String
  date         DateTime
  startTime    String
  endTime      String
  type         String
  location     String?
  description  String?
  participants User[]   @relation("EventParticipants")
}
